# -*- coding: utf-8 -*-
"""
Aplica√ß√£o Streamlit para Detec√ß√£o de Pessoas com Celular usando YOLO.

Esta aplica√ß√£o web permite:
- Upload e an√°lise de imagens
- Upload e an√°lise de v√≠deos
- Visualiza√ß√£o de resultados em tempo real
- Download de relat√≥rios
"""

import warnings
import os
import sys
import logging

# Configurar supress√£o completa de warnings ANTES de importar qualquer coisa
warnings.filterwarnings("ignore")
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=FutureWarning)
warnings.filterwarnings("ignore", category=RuntimeWarning)
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", message=".*torch.classes.*")
warnings.filterwarnings("ignore", message=".*RuntimeError.*")
warnings.filterwarnings("ignore", message=".*running event loop.*")

# Configurar vari√°veis de ambiente para supress√£o
os.environ['PYTHONWARNINGS'] = 'ignore'
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
os.environ['ULTRALYTICS_QUIET'] = 'true'

# Configurar logging para suprimir mensagens do PyTorch/Ultralytics
logging.getLogger("ultralytics").setLevel(logging.ERROR)
logging.getLogger("torch").setLevel(logging.ERROR)
logging.getLogger("PIL").setLevel(logging.ERROR)

# Suprimir stderr temporariamente para imports
from io import StringIO
import contextlib

@contextlib.contextmanager
def suppress_output():
    """Context manager para suprimir output temporariamente."""
    with open(os.devnull, "w") as devnull:
        old_stderr = sys.stderr
        old_stdout = sys.stdout
        sys.stderr = devnull
        sys.stdout = devnull
        try:
            yield
        finally:
            sys.stderr = old_stderr
            sys.stdout = old_stdout

# Imports principais com supress√£o
with suppress_output():
    import streamlit as st
    import cv2
    import numpy as np
    from PIL import Image
    import tempfile
    import pandas as pd
    import plotly.express as px
    import plotly.graph_objects as go
    from utils.detector import PersonPhoneDetector
    from utils.data_utils import DataProcessor
    import json

# Configurar avisos do Streamlit
try:
    st.set_option('deprecation.showPyplotGlobalUse', False)
    st.set_option('deprecation.showfileUploaderEncoding', False)
    st.set_option('client.showErrorDetails', False)
except Exception:
    pass

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title=" Detector de Pessoas com Celular",
    page_icon="üì±",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .success-message {
        color: #28a745;
        font-weight: bold;
    }
    .error-message {
        color: #dc3545;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

# T√≠tulo principal
st.markdown('<h1 class="main-header">üì± Detector de Pessoas com Celular</h1>', unsafe_allow_html=True)
st.markdown("---")
st.markdown("**Sistema inteligente para detec√ß√£o de pessoas usando celulares em imagens e v√≠deos**")

# Sidebar para configura√ß√µes
st.sidebar.header(" Configura√ß√µes")
st.sidebar.markdown("---")

# Configura√ß√µes do modelo
confidence = st.sidebar.slider(
    " Confian√ßa M√≠nima", 
    min_value=0.1, 
    max_value=1.0, 
    value=0.5, 
    step=0.1,
    help="Ajuste o limiar de confian√ßa para as detec√ß√µes"
)

model_option = st.sidebar.selectbox(
    "ü§ñ Modelo YOLO",
    ["Modelo Pr√©-treinado (COCO)", "Modelo Customizado"],
    help="Escolha entre o modelo pr√©-treinado ou um modelo customizado"
)

# Configura√ß√µes de visualiza√ß√£o
show_confidence = st.sidebar.checkbox(" Mostrar Confian√ßa", value=True)
show_labels = st.sidebar.checkbox(" Mostrar R√≥tulos", value=True)
save_results = st.sidebar.checkbox(" Salvar Resultados", value=False)

# Configura√ß√µes avan√ßadas
st.sidebar.markdown("---")
st.sidebar.subheader(" Configura√ß√µes Avan√ßadas")

# Op√ß√£o de detec√ß√£o multi-escala
multi_scale = st.sidebar.checkbox(
    " Detec√ß√£o Multi-escala", 
    value=True,
    help="Melhora detec√ß√£o de objetos pequenos (celulares)"
)

# Configura√ß√µes espec√≠ficas por classe
with st.sidebar.expander(" Configura√ß√µes por Classe"):
    conf_pessoas = st.sidebar.slider(
        "Confian√ßa para Pessoas", 
        0.1, 0.9, 0.5, 0.05,
        help="Limiar de confian√ßa para detectar pessoas"
    )
    
    conf_celulares = st.sidebar.slider(
        "Confian√ßa para Celulares", 
        0.1, 0.9, 0.25, 0.05,
        help="Limiar menor para detectar celulares"
    )

# Filtros de qualidade
with st.sidebar.expander(" Filtros de Qualidade"):
    aplicar_filtros = st.sidebar.checkbox(
        "Aplicar Filtros de Celular", 
        value=True,
        help="Remove detec√ß√µes implaus√≠veis de celulares"
    )
    
    area_min_celular = st.sidebar.number_input(
        "√Årea M√≠nima Celular (px)", 
        50, 1000, 100,
        help="√Årea m√≠nima para considerar um celular v√°lido"
    )
    
    area_max_celular = st.sidebar.number_input(
        "√Årea M√°xima Celular (px)", 
        1000, 100000, 50000,
        help="√Årea m√°xima para considerar um celular v√°lido"
    )

st.sidebar.markdown("---")
st.sidebar.markdown("###  Suporte")
st.sidebar.info("""
**Desenvolvedores:**
- Andre Akio Morita Osakawa (10340045)
- Andr√© Franco Ranieri (10390470)
- Felipe Mazzeo Barbosa (10402808)
- Fernando Pegoraro Bilia (10402097)
- Francesco Zangrandi Coppola (10403340)

**Universidade Presbiteriana Mackenzie**
""")

# Inicializar detector
@st.cache_resource
def load_detector():
    """Carrega o detector YOLO com configura√ß√µes melhoradas."""
    try:
        
        # Verificar se existe modelo customizado
        if model_option == "Modelo Customizado":
            model_path = "models/best_model.pt"
            if os.path.exists(model_path):
                print(f" Modelo customizado encontrado: {model_path}")
                detector = PersonPhoneDetector(model_path, confidence)
                if detector.model is not None:
                    st.sidebar.success(" Modelo customizado carregado!")
                    
                    # Mostrar informa√ß√µes do modelo
                    with st.sidebar.expander("‚Ñπ Informa√ß√µes do Modelo"):
                        model_info = detector.get_model_info()
                        for key, value in model_info.items():
                            st.write(f"**{key.replace('_', ' ').title()}:** {value}")
                    
                    return detector
                else:
                    print(" Falha ao carregar modelo customizado")
                    st.sidebar.error(" Falha ao carregar modelo customizado")
                    return None
            else:
                print(" Modelo customizado n√£o encontrado, tentando pr√©-treinado")
                st.sidebar.warning(" Modelo customizado n√£o encontrado, usando pr√©-treinado")
        
        print(" Carregando modelo pr√©-treinado...")
        detector = PersonPhoneDetector(None, confidence)
        
        if detector.model is not None:
            print(" Modelo pr√©-treinado carregado com sucesso!")
            st.sidebar.success(" Modelo pr√©-treinado carregado!")
            
            # Mostrar informa√ß√µes do modelo
            with st.sidebar.expander("‚Ñπ Informa√ß√µes do Modelo"):
                model_info = detector.get_model_info()
                for key, value in model_info.items():
                    st.write(f"**{key.replace('_', ' ').title()}:** {value}")
            
            return detector
        else:
            print(" Falha ao carregar modelo pr√©-treinado")
            st.sidebar.error(" Falha ao carregar modelo pr√©-treinado")
            return None
        
    except Exception as e:
        error_msg = f" Erro ao carregar modelo: {str(e)}"
        print(error_msg)
        st.sidebar.error(error_msg)
        
        # Mostrar detalhes do erro para debug
        import traceback
        full_error = traceback.format_exc()
        print(f" Traceback completo:\n{full_error}")
        
        # Mostrar erro na interface apenas se for diferente de torch.classes
        if "torch.classes" not in str(e):
            with st.sidebar.expander(" Detalhes do Erro", expanded=False):
                st.code(full_error, language="python")
        
        return None

# Carregar detector
detector = load_detector()

if detector:
    # Atualizar confian√ßa do detector
    detector.set_confidence_threshold(confidence)
    
    # Tabs principais
    tab1, tab2, tab3, tab4 = st.tabs([" An√°lise de Imagens", " An√°lise de V√≠deos", " Estat√≠sticas", "‚Ñπ Sobre"])
    
    # ==================== TAB 1: AN√ÅLISE DE IMAGENS ====================
    with tab1:
        st.header(" Detec√ß√£o em Imagens")
        st.markdown("Fa√ßa upload de uma imagem para detectar pessoas e celulares.")
        
        # Upload de imagem
        uploaded_file = st.file_uploader(
            "Escolha uma imagem",
            type=['jpg', 'jpeg', 'png', 'bmp', 'tiff'],
            help="Formatos suportados: JPG, JPEG, PNG, BMP, TIFF"
        )
        
        if uploaded_file is not None:
            # Carregar e exibir imagem original
            image = Image.open(uploaded_file)
            img_array = np.array(image)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader(" Imagem Original")
                st.image(image, use_container_width=True)
                
                # Informa√ß√µes da imagem
                st.info(f"""
                **Informa√ß√µes da Imagem:**
                - Dimens√µes: {image.size[0]} x {image.size[1]} pixels
                - Formato: {image.format}
                - Modo: {image.mode}
                """)
            
            with col2:
                st.subheader(" Resultados da Detec√ß√£o")
                  # Processar imagem
                with st.spinner(" Processando imagem..."):
                    try:
                        # Atualizar configura√ß√µes do detector
                        detector.set_confidence_threshold(confidence)
                        
                        # Atualizar configura√ß√µes espec√≠ficas por classe se dispon√≠vel
                        if hasattr(detector, 'class_configs'):
                            detector.class_configs[0]['conf_threshold'] = conf_pessoas  # pessoa
                            detector.class_configs[67]['conf_threshold'] = conf_celulares  # celular
                        
                        # Fazer detec√ß√£o com configura√ß√µes avan√ßadas
                        results = detector.detect(img_array, multi_scale=multi_scale)
                        
                        if results:
                            # Contar detec√ß√µes
                            people, phones, people_with_phones = detector.count_detections(results)
                            
                            # Criar imagem anotada
                            annotated_img = detector.annotate_image(img_array, results)
                            
                            # Mostrar resultado
                            st.image(annotated_img, use_container_width=True)
                            
                            # Obter detalhes das detec√ß√µes
                            detection_details = detector.get_detection_details(results)
                            
                        else:
                            st.warning(" Nenhuma detec√ß√£o encontrada.")
                            people = phones = people_with_phones = 0
                            detection_details = []
                            
                    except Exception as e:
                        st.error(f" Erro no processamento: {e}")
                        people = phones = people_with_phones = 0
                        detection_details = []
            
            # M√©tricas dos resultados
            st.markdown("---")
            st.subheader("üìä Resumo dos Resultados")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric(
                    label=" Pessoas",
                    value=people,
                    help="N√∫mero total de pessoas detectadas"
                )
            
            with col2:
                st.metric(
                    label="üì± Celulares", 
                    value=phones,
                    help="N√∫mero total de celulares detectados"
                )
            
            with col3:
                st.metric(
                    label="üì±üë• Pessoas c/ Celular",
                    value=people_with_phones,
                    help="N√∫mero de pessoas usando celular"
                )
            
            with col4:
                total_detections = people + phones  
                st.metric(
                    label="üîç Total de Detec√ß√µes",
                    value=total_detections,
                    help="Soma de todas as detec√ß√µes (pessoas + celulares)"
                )
            
            # Detalhes das detec√ß√µes
            if detection_details:
                with st.expander(" Detalhes das Detec√ß√µes", expanded=False):
                    st.write(f"**{len(detection_details)} detec√ß√µes encontradas:**")
                    
                    # Criar DataFrame para exibi√ß√£o
                    df_detections = pd.DataFrame(detection_details)
                    st.dataframe(df_detections, use_container_width=True)
                    
                    # Op√ß√£o de download
                    if save_results:
                        csv = df_detections.to_csv(index=False)
                        st.download_button(
                            label=" Baixar Detec√ß√µes (CSV)",
                            data=csv,
                            file_name=f"deteccoes_{uploaded_file.name}.csv",
                            mime="text/csv"
                        )
    
    # ==================== TAB 2: AN√ÅLISE DE V√çDEOS ====================
    with tab2:
        st.header(" Detec√ß√£o em V√≠deos")
        st.markdown("Fa√ßa upload de um v√≠deo para an√°lise frame por frame.")
        
        # Upload de v√≠deo
        uploaded_video = st.file_uploader(
            "Escolha um v√≠deo",
            type=['mp4', 'avi', 'mov', 'mkv'],
            help="Formatos suportados: MP4, AVI, MOV, MKV"
        )
        
        if uploaded_video is not None:
            # Salvar v√≠deo temporariamente
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as tmp_file:
                tmp_file.write(uploaded_video.read())
                video_path = tmp_file.name
            
            # Exibir v√≠deo
            st.video(uploaded_video)
            
            # Configura√ß√µes de processamento
            col1, col2 = st.columns(2)
            
            with col1:
                max_frames = st.number_input(
                    "üé¨ M√°ximo de Frames",
                    min_value=10,
                    max_value=500,
                    value=100,
                    step=10,
                    help="N√∫mero m√°ximo de frames a processar (para demonstra√ß√£o)"
                )
            
            with col2:
                process_interval = st.number_input(
                    "‚è≠ Intervalo de Processamento",
                    min_value=1,
                    max_value=10,
                    value=1,
                    help="Processar a cada N frames"
                )
            
            # Bot√£o para processar v√≠deo
            if st.button("üé¨ Processar V√≠deo", type="primary"):
                # Placeholder para progresso
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                try:
                    # Processar v√≠deo
                    with st.spinner(" Processando v√≠deo..."):
                        frame_results = detector.process_video(video_path, max_frames)
                    
                    if frame_results:
                        st.success(f" Processamento conclu√≠do! {len(frame_results)} frames analisados.")
                        
                        # Criar DataFrame dos resultados
                        df_video = pd.DataFrame(frame_results)
                        
                        # Gr√°ficos de an√°lise temporal
                        st.subheader(" An√°lise Temporal")
                        
                        # Gr√°fico de linha temporal
                        fig_timeline = px.line(
                            df_video, 
                            x='frame', 
                            y=['pessoas', 'celulares', 'pessoas_com_celular'],
                            title='Detec√ß√µes ao Longo do Tempo',
                            labels={'value': 'N√∫mero de Detec√ß√µes', 'frame': 'Frame'},
                            color_discrete_map={
                                'pessoas': '#1f77b4',
                                'celulares': '#ff7f0e', 
                                'pessoas_com_celular': '#2ca02c'
                            }
                        )
                        fig_timeline.update_layout(height=400)
                        st.plotly_chart(fig_timeline, use_container_width=True)
                        
                        # Estat√≠sticas do v√≠deo
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.metric(
                                " M√©dia de Pessoas",
                                f"{df_video['pessoas'].mean():.1f}",
                                f"Max: {df_video['pessoas'].max()}"
                            )
                        
                        with col2:
                            st.metric(
                                " M√©dia de Celulares", 
                                f"{df_video['celulares'].mean():.1f}",
                                f"Max: {df_video['celulares'].max()}"
                            )
                        
                        with col3:
                            peak_detections = df_video['total_deteccoes'].max()
                            st.metric(
                                " Pico de Detec√ß√µes",
                                peak_detections,
                                f"Frame: {df_video.loc[df_video['total_deteccoes'].idxmax(), 'frame']}"
                            )
                        
                        # Histogramas
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            fig_hist_people = px.histogram(
                                df_video, 
                                x='pessoas',
                                title='Distribui√ß√£o - Pessoas por Frame',
                                nbins=20
                            )
                            st.plotly_chart(fig_hist_people, use_container_width=True)
                        
                        with col2:
                            fig_hist_phones = px.histogram(
                                df_video,
                                x='celulares', 
                                title='Distribui√ß√£o - Celulares por Frame',
                                nbins=20
                            )
                            st.plotly_chart(fig_hist_phones, use_container_width=True)
                        
                        # Op√ß√£o de download dos resultados
                        if save_results:
                            csv_video = df_video.to_csv(index=False)
                            st.download_button(
                                label="üì• Baixar Resultados do V√≠deo (CSV)",
                                data=csv_video,
                                file_name=f"analise_video_{uploaded_video.name}.csv",
                                mime="text/csv"
                            )
                    
                    else:
                        st.error(" Erro no processamento do v√≠deo.")
                        
                except Exception as e:
                    st.error(f" Erro durante o processamento: {e}")
                
                finally:
                    # Limpar arquivo tempor√°rio
                    if os.path.exists(video_path):
                        os.unlink(video_path)
    
    # ==================== TAB 3: ESTAT√çSTICAS ====================
    with tab3:
        st.header(" Estat√≠sticas e An√°lises")
        
        # Informa√ß√µes do modelo
        model_info = detector.get_model_info()
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader(" Informa√ß√µes do Modelo")
            st.json(model_info)
        
        with col2:
            st.subheader(" Dados de Exemplo")
            
            # Criar dados de exemplo para demonstra√ß√£o
            from utils.data_utils import create_sample_data
            sample_data = create_sample_data()
            
            if st.button(" Gerar An√°lise de Exemplo"):
                df_sample = pd.DataFrame(sample_data)
                
                # Gr√°fico de exemplo
                fig_sample = px.area(
                    df_sample,
                    x='frame',
                    y='total_deteccoes',
                    title='Exemplo: Total de Detec√ß√µes por Frame',
                    color_discrete_sequence=['#ff6b6b']
                )
                st.plotly_chart(fig_sample, use_container_width=True)
                
                # Estat√≠sticas de exemplo
                st.write("**Estat√≠sticas dos Dados de Exemplo:**")
                st.write(df_sample.describe())
        
        # Processador de dados
        st.subheader(" Ferramentas de An√°lise")
        
        processor = DataProcessor()
        
        if st.button(" Validar Estrutura do Dataset"):
            validation = processor.validate_dataset_structure("./data")
            
            if validation["valido"]:
                st.success(" Estrutura do dataset v√°lida!")
            else:
                st.error(" Problemas encontrados na estrutura:")
                for problema in validation["problemas"]:
                    st.write(f"- {problema}")
            
            if validation["estatisticas"]:
                st.write("**Estat√≠sticas do Dataset:**")
                st.json(validation["estatisticas"])
    
    # ==================== TAB 4: SOBRE ====================
    with tab4:
        st.header("‚Ñπ Sobre o Projeto")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader(" Objetivo")
            st.write("""
            Este projeto desenvolve um sistema de detec√ß√£o autom√°tica de pessoas 
            utilizando celulares em ambientes p√∫blicos ou privados, utilizando 
            t√©cnicas de vis√£o computacional com YOLO (You Only Look Once).
            """)
            
            st.subheader(" Tecnologias")
            st.write("""
            - **YOLOv8** (Ultralytics) - Modelo de detec√ß√£o
            - **OpenCV** - Processamento de imagens
            - **Streamlit** - Interface web
            - **Python** - Linguagem principal
            """)
            
            st.subheader(" Performance Esperada")
            st.write("""
            - **Precis√£o**: ~85%
            - **Tempo de infer√™ncia**: <50ms por frame
            - **Classes detectadas**: 3 (pessoa, celular, pessoa_com_celular)
            """)
        
        with col2:
            st.subheader(" Equipe")
            st.write("""
            **Integrantes:**
            - Andre Akio Morita Osakawa (10340045)
            - Andr√© Franco Ranieri (10390470)
            - Felipe Mazzeo Barbosa (10402808)
            - Fernando Pegoraro Bilia (10402097)
            - Francesco Zangrandi Coppola (10403340)
            
            **Institui√ß√£o:**
            Universidade Presbiteriana Mackenzie
            Faculdade de Computa√ß√£o e Inform√°tica
            
            **Disciplina:**
            Intelig√™ncia Artificial - 2025
            """)
            
            st.subheader(" Como Usar")
            st.write("""
            1. **Upload**: Carregue uma imagem ou v√≠deo
            2. **Configura√ß√£o**: Ajuste a confian√ßa na barra lateral
            3. **Processamento**: Aguarde a an√°lise autom√°tica
            4. **Resultados**: Visualize as detec√ß√µes e m√©tricas
            """)
            
            st.subheader(" Suporte")
            st.write("""
            Para d√∫vidas ou problemas:
            - üìß Email: suporte@projeto.com
            - üìñ GitHub: [Reposit√≥rio do Projeto](#)
            - üêõ Issues: [Reportar Problemas](#)
            """)

else:
    st.error(" N√£o foi poss√≠vel carregar o detector. Verifique a instala√ß√£o das depend√™ncias.")
    st.info("""
    **Para resolver este problema:**
    1. Certifique-se de que todas as depend√™ncias est√£o instaladas
    2. Execute: `pip install -r requirements.txt`
    3. Verifique se o modelo est√° dispon√≠vel
    """)

# Footer
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666;'>
        üì± Detector de Pessoas com Celular | Desenvolvido com usando Streamlit<br>
        Universidade Presbiteriana Mackenzie - 2025
    </div>
    """, 
    unsafe_allow_html=True
)